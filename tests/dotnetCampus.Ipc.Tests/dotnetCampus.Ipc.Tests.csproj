<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!--
      使用两个框架：
      1. 在 net8.0 下我们将使用 System.Text.Json 作为 IPC 的底层传输机制；
      2. 在 net6.0 下我们将使用 Newtonsoft.Json 作为 IPC 的底层传输机制；
      3. 可以分别测试这两种机制单独是否能正常工作。
      4. 额外配合 dotnetCampus.Ipc.FakeTests 测试项目，可以测试两个机制之间的兼容性。
    -->
    <TargetFrameworks>net8.0;net6.0</TargetFrameworks>
    <ImplicitUsings>enable</ImplicitUsings>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" />
    <PackageReference Include="MSTest.TestAdapter" />
    <PackageReference Include="MSTest.TestFramework" />
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Moq" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\dotnetCampus.Ipc.Analyzers\dotnetCampus.Ipc.Analyzers.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\..\src\dotnetCampus.Ipc\dotnetCampus.Ipc.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\dotnetCampus.Ipc.FakeTests\FakeApis\**\*.cs" Link="CompilerServices\FakeRemote\%(RecursiveDir)\%(Filename)%(Extension)" />
  </ItemGroup>

</Project>
