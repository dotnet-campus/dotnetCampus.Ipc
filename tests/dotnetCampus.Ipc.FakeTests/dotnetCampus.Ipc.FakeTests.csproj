<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <!--
      请保持 net6.0 不变，不可升级到 net8.0：
      1. 在 net6.0 下我们将使用 Newtonsoft.Json 作为 IPC 的底层传输机制；
      2. 在 net8.0 下我们将使用 System.Text.Json 作为 IPC 的底层传输机制；
      3. 主测试项目已经是双框架的了，但不能测试这两种机制之间的兼容性，所以需要一个旧框架的测试项目来专门测试。
    -->
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>disable</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      在绝大多数项目里面，我们希望使用最新的 C# 版本；但源生成器必须支持旧版本的 C# 语法以支持旧的 IDE；
      所以我们选了一个普通代码最少的项目降低 C# 版本，以确保源生成器可以生成旧语法代码的同时，不影响其他项目使用最新的 C# 版本。

      有一台构建机是 Windows Server 2016，最高只能安装 Visual Studio 17.6，最高支持到 .NET 7：
      https://learn.microsoft.com/en-us/dotnet/core/install/windows#net-versions-and-visual-studio

      .NET 7 对应的 C# 版本是 11.0：
      https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-versioning

      从 C# 12.0 开始，才可使用集合表达式：
      https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#collection-expressions
    -->
    <LangVersion>7.3</LangVersion>
    <ImplicitUsings>false</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\dotnetCampus.Ipc.Analyzers\dotnetCampus.Ipc.Analyzers.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\..\src\dotnetCampus.Ipc\dotnetCampus.Ipc.csproj" />
  </ItemGroup>

</Project>
